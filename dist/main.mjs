import F from"minimist";import t from"node:fs";import r from"node:path";import w from"node:process";import{fileURLToPath as T}from"node:url";import{green as b,cyan as D,blue as J,reset as p,red as j}from"kolorist";import L from"prompts";const k=[{name:"vue",display:"Vue",color:b},{name:"react",display:"React",color:D},{name:"typescript",display:"TypeScript",color:J}],h=k.map(e=>[e.name]).reduce((e,o)=>e.concat(o),[]),g=F(w.argv.slice(2),{string:["_"]});function $(e){return e?.trim().replace(/\/+$/g,"")}const d=w.cwd(),R={_gitignore:".gitignore"},f="new-project";async function E(){const e=$(g._[0]),o=g.template||g.t;let c=e||f;console.log(r.resolve());const l=()=>c==="."?r.basename(r.resolve()):c;let s;try{s=await L([{type:e?null:"text",name:"projectName",message:p("Project name:"),initial:f,onState:n=>{c=$(n.value)||f}},{type:()=>!t.existsSync(c)||I(c)?null:"confirm",name:"overwrite",message:()=>c==="."?"Current directory":`Target directory "${c}" is not empty. Remove existing files and continue?`},{type:(n,{overwrite:a})=>{if(a===!1)throw new Error(j("\u2716")+" Operation cancelled");return null},name:"overwriteChecker"},{type:()=>x(l())?null:"text",name:"packageName",message:p("Package name:"),initial:()=>V(l()),validate:n=>x(n)||"Invalid package.json name"},{type:o&&h.includes(o)?null:"select",name:"framework",message:typeof o=="string"&&!h.includes(o)?p(`"${o}" isn't a valid template. Please choose from below: `):p("Select a framework:"),initial:0,choices:k.map(n=>{const a=n.color;return{title:a(n.display||n.name),value:n}})}],{onCancel:()=>{throw new Error(j("\u2716")+" Operation cancelled")}})}catch(n){console.log(n.message);return}const{framework:_,overwrite:z,packageName:C}=s,i=r.join(d,c);z?A(i):t.existsSync(i)||t.mkdirSync(i,{recursive:!0});let O=_?.name||o;console.log(`
Scaffolding project in ${i}...`);const m=r.resolve(T(import.meta.url),"../..",`templates/${O}`);console.log(m);const y=(n,a)=>{const S=r.join(i,R[n]??n);a?t.writeFileSync(S,a):N(r.join(m,n),S)},P=t.readdirSync(m);for(const n of P.filter(a=>a!=="package.json"))y(n);const v=JSON.parse(t.readFileSync(r.join(m,"package.json"),"utf-8"));v.name=C||l(),y("package.json",JSON.stringify(v,null,2)+`
`);const u=r.relative(d,i);console.log(`
Done. Now run:
`),i!==d&&console.log(`
    cd ${u.includes(" ")?`"${u}"`:u}
    `),console.log("pnpm install"),console.log("pnpm run dev"),console.log()}E();function I(e){const o=t.readdirSync(e);return o.length===0||o.length===1&&o[0]===".git"}function x(e){return/^(?:@[a-z\d\-*~][a-z\d\-*._~]*\/)?[a-z\d\-~][a-z\d\-._~]*$/.test(e)}function V(e){return e.trim().toLowerCase().replace(/\s+/g,"-").replace(/^[._]/,"").replace(/[^a-z\d\-~]+/g,"-")}function A(e){if(t.existsSync(e))for(const o of t.readdirSync(e))o!==".git"&&t.rmSync(r.resolve(e,o),{recursive:!0,force:!0})}function N(e,o){t.statSync(e).isDirectory()?M(e,o):t.copyFileSync(e,o)}function M(e,o){t.mkdirSync(o,{recursive:!0});for(const c of t.readdirSync(e)){const l=r.resolve(e,c),s=r.resolve(o,c);N(l,s)}}
