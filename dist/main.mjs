import F from"minimist";import r from"node:fs";import c from"node:path";import w from"node:process";import{fileURLToPath as b}from"node:url";import{green as D,cyan as J,reset as p,red as j}from"kolorist";import L from"prompts";const k=[{name:"vue",display:"Vue",color:D},{name:"react",display:"React",color:J}],h=k.map(e=>[e.name]).reduce((e,n)=>e.concat(n),[]),g=F(w.argv.slice(2),{string:["_"]});function $(e){return e?.trim().replace(/\/+$/g,"")}const f=w.cwd(),R={_gitignore:".gitignore"},d="new-project";async function T(){const e=$(g._[0]),n=g.template||g.t;let t=e||d;const l=()=>t==="."?c.basename(c.resolve()):t;let s;try{s=await L([{type:e?null:"text",name:"projectName",message:p("Project name:"),initial:d,onState:o=>{t=$(o.value)||d}},{type:()=>!r.existsSync(t)||E(t)?null:"confirm",name:"overwrite",message:()=>t==="."?"Current directory":`Target directory "${t}" is not empty. Remove existing files and continue?`},{type:(o,{overwrite:a})=>{if(a===!1)throw new Error(j("\u2716")+" Operation cancelled");return null},name:"overwriteChecker"},{type:()=>x(l())?null:"text",name:"packageName",message:p("Package name:"),initial:()=>V(l()),validate:o=>x(o)||"Invalid package.json name"},{type:n&&h.includes(n)?null:"select",name:"framework",message:typeof n=="string"&&!h.includes(n)?p(`"${n}" isn't a valid template. Please choose from below: `):p("Select a framework:"),initial:0,choices:k.map(o=>{const a=o.color;return{title:a(o.display||o.name),value:o}})}],{onCancel:()=>{throw new Error(j("\u2716")+" Operation cancelled")}})}catch(o){console.log(o.message);return}const{framework:_,overwrite:z,packageName:C}=s,i=c.join(f,t);z?A(i):r.existsSync(i)||r.mkdirSync(i,{recursive:!0});let O=_?.name||n;console.log(`
Scaffolding project in ${i}...`);const m=c.resolve(b(import.meta.url),"../..",`templates/${O}`);console.log(m);const y=(o,a)=>{const S=c.join(i,R[o]??o);a?r.writeFileSync(S,a):N(c.join(m,o),S)},P=r.readdirSync(m);for(const o of P.filter(a=>a!=="package.json"))y(o);const v=JSON.parse(r.readFileSync(c.join(m,"package.json"),"utf-8"));v.name=C||l(),y("package.json",JSON.stringify(v,null,2)+`
`);const u=c.relative(f,i);console.log(`
Done. Now run:
`),i!==f&&console.log(`
    cd ${u.includes(" ")?`"${u}"`:u}
    `),console.log("pnpm install"),console.log("pnpm run dev"),console.log()}T();function E(e){const n=r.readdirSync(e);return n.length===0||n.length===1&&n[0]===".git"}function x(e){return/^(?:@[a-z\d\-*~][a-z\d\-*._~]*\/)?[a-z\d\-~][a-z\d\-._~]*$/.test(e)}function V(e){return e.trim().toLowerCase().replace(/\s+/g,"-").replace(/^[._]/,"").replace(/[^a-z\d\-~]+/g,"-")}function A(e){if(r.existsSync(e))for(const n of r.readdirSync(e))n!==".git"&&r.rmSync(c.resolve(e,n),{recursive:!0,force:!0})}function N(e,n){r.statSync(e).isDirectory()?I(e,n):r.copyFileSync(e,n)}function I(e,n){r.mkdirSync(n,{recursive:!0});for(const t of r.readdirSync(e)){const l=c.resolve(e,t),s=c.resolve(n,t);N(l,s)}}
